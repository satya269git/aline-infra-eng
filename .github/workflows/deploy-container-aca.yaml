name: Build and Deploy ASP.NET Core Web API to Azure Container App

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: dotnet-api-sample
  PROJECT_NAME: SampleApi
  CONTAINER_APP_ENV: container-app-env

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Create sample ASP.NET Core Web API if not exists
        run: |
          if [ ! -f ${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj ]; then
            dotnet new webapi -n ${{ env.PROJECT_NAME }}
          fi

      - name: Add Dockerfile if missing
        run: |
          if [ ! -f Dockerfile ]; then
            cat <<EOF > Dockerfile
            FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
            WORKDIR /app
            EXPOSE 80

            FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
            WORKDIR /src
            COPY ./${{ env.PROJECT_NAME }} ./${{ env.PROJECT_NAME }}
            WORKDIR /src/${{ env.PROJECT_NAME }}
            RUN dotnet publish -c Release -o /app/publish

            FROM base AS final
            WORKDIR /app
            COPY --from=build /app/publish .
            ENTRYPOINT ["dotnet", "${{ env.PROJECT_NAME }}.dll"]
            EOF
          fi

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Build and Push Docker image to ACR
        run: |
          docker build -t ${{ secrets.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
          docker push ${{ secrets.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Create Azure Container App Environment (if needed)
        run: |
          if ! az containerapp env show --name ${{ env.CONTAINER_APP_ENV }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} &> /dev/null; then
            az containerapp env create \
              --name ${{ env.CONTAINER_APP_ENV }} \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --location ${{ secrets.AZURE_LOCATION }}
          fi

      - name: Create or Update Azure Container App
        run: |
          if ! az containerapp show --name ${{ secrets.AZURE_CONTAINER_APP_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} &> /dev/null; then
            echo "Creating new Container App..."
            az containerapp create \
              --name ${{ secrets.AZURE_CONTAINER_APP_NAME }} \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --environment ${{ env.CONTAINER_APP_ENV }} \
              --image ${{ secrets.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
              --target-port 80 \
              --ingress 'external' \
              --registry-server ${{ secrets.AZURE_CONTAINER_REGISTRY }}
          else
            echo "Updating existing Container App..."
            az containerapp update \
              --name ${{ secrets.AZURE_CONTAINER_APP_NAME }} \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --image ${{ secrets.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
              --registry-server ${{ secrets.AZURE_CONTAINER_REGISTRY }}
          fi

      - name: Output Container App URL
        run: |
          URL=$(az containerapp show \
            --name ${{ secrets.AZURE_CONTAINER_APP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --query properties.configuration.ingress.fqdn \
            -o tsv)
          echo "App deployed at: https://$URL"
